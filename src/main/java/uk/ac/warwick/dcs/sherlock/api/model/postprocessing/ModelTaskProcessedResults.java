package uk.ac.warwick.dcs.sherlock.api.model.postprocessing;

import uk.ac.warwick.dcs.sherlock.api.SherlockHelper;
import uk.ac.warwick.dcs.sherlock.api.common.ICodeBlockGroup;
import uk.ac.warwick.dcs.sherlock.api.model.scoring.IScoreFunction;

import java.util.*;

/**
 * Processed results for a task (for a single IDetector instance)
 *
 * Each file in this should be scored for its performance only in this task
 */
public class ModelTaskProcessedResults {

	private IScoreFunction scorer;
	private List<ICodeBlockGroup> groups;

	/**
	 * @param scorer TODO: look to make it possible to support multiple scorers in a single PostProcessor depending on the detector used
	 */
	public ModelTaskProcessedResults(IScoreFunction scorer) {
		this.scorer = scorer;
		this.groups = new LinkedList<>();
	}

	/**
	 * Creates a new ICodeBlockGroup instance, adds it to the results list and returns it
	 * @return the new instance
	 */
	public ICodeBlockGroup addGroup() {
		try {
			ICodeBlockGroup g = SherlockHelper.getInstanceOfCodeBlockGroup();
			this.groups.add(g);
			return g;
		}
		catch (IllegalAccessException | InstantiationException e) {
			e.printStackTrace(); // couldn't create group
		}

		return null;
	}

	/**
	 * @return the scorer instance generated by the post processor
	 */
	public IScoreFunction getScorer() {
		return scorer;
	}

	/**
	 * @return the final list of {@link ICodeBlockGroup} produced by the task
	 */
	public List<ICodeBlockGroup> getGroups() {
		return groups;
	}
}
