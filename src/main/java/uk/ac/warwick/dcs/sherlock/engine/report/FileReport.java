package uk.ac.warwick.dcs.sherlock.engine.report;

import java.util.*;

/**
 * This class represents the report for a single file.
 *
 * each reason needs a detectiontype, score, line numbers, description
 */
public class FileReport {

	/**
	 * The id for this file as generated by ISourceFile.getPersistentId()
	 */
	private long persistentId;

	/**
	 * The report body. Each element in the list should be a separate component e.g. the first item describes one similarity, the second item describes the next, etc.
	 */
	private List<FileReportItem> reportContent;

	/**
	 * @param persistentId the unique identifier for the source file as generated by ISourceFile.getPersistentId()
	 */
	public FileReport(long persistentId) {
		this.persistentId = persistentId;
		reportContent = new ArrayList<>();
	}

	/**
	 * Adds a single item (for a single detected plagiarism instance) to the report.
	 *
	 * @param content The paragraph/sentence/etc. of text (and associated data including line numbers etc.) to be added to the report.
	 */
	public void AddReportItem(FileReportItem content) {
		reportContent.add(content);
	}

	/**
	 * Adds multiple items (for multiple detected plagiarism instances) to the report.
	 *
	 * @param content A list of strings (and associated data including line numbers etc.), each one being a single paragraph/sentence/etc. to be added to the report, in order.
	 */
	public void AddReportItems(List<FileReportItem> content) {
		reportContent.addAll(content);
	}

	/**
	 * Retrieve the persistent ID of the file this report was generated for.
	 *
	 * @return persistentId, originally generated from getPersistentId() in ISourceFile.
	 */
	public long getPersistentId() {
		return persistentId;
	}

	/**
	 * Retrieves the full content of the report.
	 *
	 * @return reportContent, the stored List of FileReportItems making up the report.
	 */
	public List<FileReportItem> GetReport() {
		return reportContent;
	}
}
