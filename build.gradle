import org.apache.tools.ant.filters.ReplaceTokens

plugins {
   id 'net.nemerosa.versioning' version '2.7.1'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'antlr'

group = 'uk.ac.warwick.dcs.sherlock'
version = versioning.info.full

description = """Sherlock"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

/**
 * Without the next section Gradle will add a 'compile' dependency on Antlr3:
 * https://github.com/gradle/gradle/issues/820
 */
configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {  
    antlr "org.antlr:antlr4:4.7.1"
    compile "org.antlr:antlr4-runtime:4.7.1"

    compile group: 'com.miglayout', name: 'miglayout-javafx', version:'5.0'
    compile group: 'commons-lang', name: 'commons-lang', version:'2.6'
    compile group: 'org.apache.commons', name: 'commons-compress', version:'1.5'
    compile group: 'commons-io', name: 'commons-io', version:'2.6'
    compile group: 'org.antlr', name: 'antlr4-runtime', version:'4.7.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.12'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.12'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.12'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    compile group: 'org.graphstream', name: 'gs-core', version:'1.0'
    compile group: 'org.graphstream', name: 'gs-ui', version:'1.1.2'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version:'5.1.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version:'5.1.0'
    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version:'5.1.0'
    testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version:'1.1.0'
    testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version:'1.1.0'
    testCompile group: 'junit', name: 'junit', version:'4.11'
}

clean {
    delete  "src/generated"
}

generateGrammarSource {
    doLast {
        delete  "$projectDir/src/generated/antlr/"
        copy {
            from "$buildDir/generated-src/antlr/main"
            into "$projectDir/src/generated/antlr/uk/ac/warwick/dcs/sherlock/services/preprocessing"
        }
    }
}

/** Token Replacement */
task generateSources(type: Copy) {
    from "src/main/java"
    into "$buildDir/generated-src/java/main"
    filter(ReplaceTokens, tokens: [
            '$VERSION':  versioning.info.display,
            'yyyy': 'bbbb'
    ])
}

sourceSets.main.java.srcDirs = ["$buildDir/generated-src/java/main", "src/generated/antlr/"]
compileJava.dependsOn generateSources

jar {
    fileTree("$buildDir/libs") { include '*.jar' }
    manifest {
        attributes (
                'Main-Class': 'uk.ac.warwick.dcs.sherlock.SherlockApplication',
                "Class-Path": 'lib/' + configurations.compile.collect { it.getName() }.join(' lib/')
        )
    }
}

task deps(type: Copy) {
    doFirst {
        mkdir("$buildDir/libs/lib")
    }
    from configurations.runtime
    into "$buildDir/libs/lib"
}

task zip(type: Zip, dependsOn: deps) {
    delete  "$buildDir/distributions"
    from "$buildDir/libs"
    into(project.name + '-' + project.version)
}

task distribution {
    dependsOn 'jar'
    dependsOn 'zip'
    tasks.findByName('zip').mustRunAfter 'jar'
}




