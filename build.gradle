import org.apache.tools.ant.filters.ReplaceTokens
import java.util.regex.Matcher

plugins {
    id "java"
    id "antlr"
    id "org.springframework.boot" version "2.0.6.RELEASE"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "org.ajoberstar.grgit" version "2.3.0"
    id "idea"
}

repositories {
    maven {
        url 'https://maven-central.storage.googleapis.com' // Google's mirror of Maven Central
    }
    jcenter()
    mavenCentral()
}

dependencies {
    antlr 'org.antlr:antlr4:4.7.1'

    implementation (
        'org.antlr:antlr4-runtime:4.7.1',
        'com.google.guava:guava:26.0-jre',
        'org.springframework.boot:spring-boot-starter',
        'org.springframework.boot:spring-boot-starter-web',
        'org.springframework.boot:spring-boot-starter-thymeleaf'
        //, 'org.springframework.boot:spring-boot-devtools'
    )

    testImplementation (
        'org.springframework.boot:spring-boot-starter-test',
        'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )

    testRuntimeOnly (
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
}

idea {
    module {
        contentRoot = file("$projectDir")

        sourceDirs = new LinkedHashSet<File>()
        sourceDirs += file("src/main/java")
        sourceDirs += file("src/main/antlr")

        testSourceDirs = new LinkedHashSet<File>()
        testSourceDirs += file("src/test/java")

        resourceDirs += file("src/main/resources")

        generatedSourceDirs += file("${buildDir}/tmp/src/main/antlr")

        excludeDirs += file("${buildDir}/tmp/src/main/java")
    }
}

project.ext.lastTag = grgit.tag.list().findAll { (it.name ==~ /([0-9]+).([0-9]+)$/).find() }.sort { -it.commit.time }.sort { -TagSupport.tagOrder(/([0-9]+).([0-9]+)$/, it.name) }.collect { it.name }[0]
project.ext.count = grgit.log { range(grgit.tag.list().find { it.name == project.lastTag.toString() }.collect { it }[0].name, "HEAD") }.size()

group = 'uk.ac.warwick.dcs.sherlock'
version = "${project.ext.lastTag}.${project.count}"

description = """Sherlock"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

task printVersion {
    println project.name + '-' + project.version
}

generateGrammarSource {
    outputDirectory = file("${buildDir}/tmp/src/main/antlr/uk/ac/warwick/dcs/sherlock/model/base/lang")
}

task generateSources(type: Copy) {
    from("src/main/java")
    exclude "**/sherlock/deprecated/**"
    into "$buildDir/tmp/src/main/java"
    filter(ReplaceTokens, tokens: [VERSION: project.version.toString()])
}
sourceSets.main.java.srcDirs = ["$buildDir/tmp/src/main/java", "$buildDir/tmp/src/main/antlr"]
compileJava.dependsOn generateSources

task generateTestSources(type: Copy) {
    from("src/test/java")
    exclude "**/sherlock/deprecated/**"
    into "$buildDir/tmp/src/test/java"
}
sourceSets.test.java.srcDirs = ["$buildDir/tmp/src/test/java"]
compileTestJava.dependsOn generateTestSources

task deps(type: Copy) {
    from configurations.runtime
    into "$buildDir/out/lib"
}


jar {
    enabled = false //enable to build a standard jar
    destinationDir = file("$buildDir/out")
    classifier = 'cmd'
    delete fileTree("$buildDir/out") {
        include '*-cmd.jar'
        exclude jar.archiveName
        exclude jar.archivePath.getName()
    }
    manifest {
        attributes(
                'Main-Class': 'uk.ac.warwick.dcs.sherlock.Sherlock', //set this to a main method for a cmd version of sherlock
                'Implementation-Version': version,
                'Class-Path': 'lib/' + configurations.compile.collect { it.getName() }.join(' lib/')
        )
    }
}
jar.dependsOn deps

bootJar {
    enabled = true
    destinationDir = file("$buildDir/out")
    //mainClassName = 'com.example.ExampleApplication' // We may want to configure this if we also provide a cmd jar
    manifest {
        attributes(
                'Implementation-Version': version
        )
    }
    delete fileTree("$buildDir/out") {
        include '*.jar'
        exclude bootJar.archiveName
        exclude jar.archivePath.getName()
        exclude '*-cmd.jar'
    }
}

test {
    useJUnitPlatform()
}

task branchSetup {
    ant.replaceregexp(match: '# Sherlock(.*)', replace: "# Sherlock  [![Build Status: ${grgit.branch.current().name}](https://travis-ci.org/DCS-Sherlock/Sherlock.svg?branch=${grgit.branch.current().name})](https://travis-ci.org/DCS-Sherlock/Sherlock?branch=${grgit.branch.current().name})", flags: 's', byline: true) {
        fileset(dir: project.projectDir, includes: 'README.md')
    }
}

class TagSupport {
    static int tagOrder(String tagPattern, String tagName) {
        Matcher m = tagName =~ tagPattern

        if (m.find()) {
            int ngroups = m.groupCount()

            if (ngroups < 1) {
                throw new IllegalArgumentException("Tag pattern is expected to have at least one number grouping instruction: $tagPattern")
            } else {
                return m.group(1) as int
            }
        } else {
            throw new IllegalStateException("Tag $tagName should have matched $tagPattern")
        }
    }
}
