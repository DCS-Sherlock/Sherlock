import java.util.regex.Matcher
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
   //id 'net.nemerosa.versioning' version '2.7.1'
   id "org.ajoberstar.grgit" version "2.3.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'antlr'
apply plugin: 'idea'

project.ext.lastTag = grgit.tag.list().findAll { (it.name ==~ /([0-9]+).([0-9]+)$/).find() }.sort { -it.commit.time }
    .sort { -TagSupport.tagOrder(/([0-9]+).([0-9]+)$/, it.name) }.collect { it.name }[0]
project.ext.count = grgit.log {range(grgit.tag.list().find{ it.name == project.lastTag.toString()}.collect { it }[0].name, "HEAD")}.size()

group = 'uk.ac.warwick.dcs.sherlock'
version = "${project.ext.lastTag}.${project.count}"

description = """Sherlock"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

/**
 * Without the next section Gradle will add a 'compile' dependency on Antlr3:
 * https://github.com/gradle/gradle/issues/820
 */
configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {  
    antlr 'org.antlr:antlr4:4.7.1'

    compile(
            'org.antlr:antlr4-runtime:4.7.1'
    )

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )

    compile group: 'com.miglayout', name: 'miglayout-javafx', version:'5.0'
    compile group: 'commons-lang', name: 'commons-lang', version:'2.6'
    compile group: 'org.apache.commons', name: 'commons-compress', version:'1.5'
    compile group: 'commons-io', name: 'commons-io', version:'2.6'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.12'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.12'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.12'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    compile group: 'org.graphstream', name: 'gs-core', version:'1.0'
    compile group: 'org.graphstream', name: 'gs-ui', version:'1.1.2'
}

idea{
    module {
        contentRoot = file("$projectDir")

        sourceDirs = new LinkedHashSet<File>()
        sourceDirs += file("src/main/java")
        sourceDirs += file("src/main/antlr")

        testSourceDirs = new LinkedHashSet<File>()
        testSourceDirs += file("src/test/java")

        resourceDirs += file("src/main/resources")

        generatedSourceDirs += file("${buildDir}/tmp/src/main/antlr")

        excludeDirs += file("${buildDir}/tmp/src/main/java")
    }
}

task printVersion {
    println project.name + '-' + project.version
}

generateGrammarSource {
    outputDirectory = file("${buildDir}/tmp/src/main/antlr/uk/ac/warwick/dcs/sherlock/services/preprocessing")
}

/** Token Replacement */
task generateSources(type: Copy) {
    delete "$buildDir/src"
    from "src/main/java"
    into "$buildDir/tmp/src/main/java"
    filter(ReplaceTokens, tokens: [VERSION:  project.version.toString()])
}
sourceSets.main.java.srcDirs = ["$buildDir/tmp/src/main/java", "$buildDir/tmp/src/main/antlr"]
compileJava.dependsOn generateSources

/** Jar*/
jar {
    destinationDir = file("$buildDir")
    delete fileTree("$buildDir") { include '*.jar' }
    manifest {
        attributes (
                'Main-Class': 'uk.ac.warwick.dcs.sherlock.SherlockApplication',
                "Class-Path": 'lib/' + configurations.compile.collect { it.getName() }.join(' lib/')
        )
    }
}

/** Copy dependencies in lib folder */
task deps(type: Copy) {
    doFirst {
        mkdir("$buildDir/lib")
    }
    from configurations.runtime
    into "$buildDir/lib"
}

/** Create dist zip */
task zip(type: Zip) {
    delete   fileTree("$buildDir/distributions") { include '*.zip' }
    from ("$buildDir") {
        include "*.jar"
    }
    from("$buildDir/lib/") {
        into('lib')
    }
    into(project.name + '-' + project.version)
}

task distribution {
    dependsOn 'deps'
    dependsOn 'build'
    dependsOn 'zip'
    tasks.findByName('build').mustRunAfter 'deps'
    tasks.findByName('zip').mustRunAfter 'build'
}

test {
    useJUnitPlatform()
}

task updateReadmeBranch {
    ant.replaceregexp(match:'# Sherlock(.*)', replace:"# Sherlock  [![Build Status](https://travis-ci.org/DCS-Sherlock/Sherlock.svg?branch=${grgit.branch.current().name})](https://travis-ci.org/DCS-Sherlock/Sherlock)", flags:'s', byline:true) {
        fileset(dir: project.projectDir, includes: 'README.md')
    }
    ant.replaceregexp(match:'Version:(.*)', replace:"Version: ${project.version}", flags:'s', byline:true) {
        fileset(dir: project.projectDir, includes: 'README.md')
    }
    ant.replaceregexp(match:'Branch:(.*)', replace:"Branch: ${grgit.branch.current().name}", flags:'s', byline:true) {
        fileset(dir: project.projectDir, includes: 'README.md')
    }

    println grgit.branch.current().name
}

class TagSupport
{
    static int tagOrder(String tagPattern, String tagName)
    {
        Matcher m = tagName =~ tagPattern

        if (m.find())
        {
            int ngroups = m.groupCount()

            if (ngroups < 1)
            {
                throw new IllegalArgumentException("Tag pattern is expected to have at least one number grouping instruction: $tagPattern")
            }
            else
            {
                return m.group(1) as int
            }
        }
        else
        {
            throw new IllegalStateException("Tag $tagName should have matched $tagPattern")
        }
    }
}