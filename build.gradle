import org.apache.tools.ant.filters.ReplaceTokens
import net.nemerosa.versioning.SCMInfo
import net.nemerosa.versioning.ReleaseInfo

plugins {
   id 'net.nemerosa.versioning' version '2.7.1'
   id "org.ajoberstar.grgit" version "2.3.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'antlr'

versioning {
    lastTagPattern = /(version)\/[0-9.]+$/
    releases = ['ver']
    releaseParser = { SCMInfo scmInfo, String separator = '/' ->
        List<String> part = scmInfo.lastTag.split(separator) + ''
        new ReleaseInfo(type: "ver", base: part[1])
    }
}

project.ext.count = grgit.log {range(grgit.tag.list().find{ it.name == versioning.info.lastTag}.collect { it }[0].name, "HEAD")}.size()

group = 'uk.ac.warwick.dcs.sherlock'
version = "${versioning.info.base}.${project.count}"

description = """Sherlock"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

/**
 * Without the next section Gradle will add a 'compile' dependency on Antlr3:
 * https://github.com/gradle/gradle/issues/820
 */
configurations {
    compile {
        extendsFrom = extendsFrom.findAll { it != configurations.antlr }
    }
}

dependencies {  
    antlr 'org.antlr:antlr4:4.7.1'

    compile(
            'org.antlr:antlr4-runtime:4.7.1'
    )

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )

    compile group: 'com.miglayout', name: 'miglayout-javafx', version:'5.0'
    compile group: 'commons-lang', name: 'commons-lang', version:'2.6'
    compile group: 'org.apache.commons', name: 'commons-compress', version:'1.5'
    compile group: 'commons-io', name: 'commons-io', version:'2.6'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.12'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.12'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.12'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    compile group: 'org.graphstream', name: 'gs-core', version:'1.0'
    compile group: 'org.graphstream', name: 'gs-ui', version:'1.1.2'
}

task printVersion {
    println project.name + '-' + project.version

    //println grgit.tag.list().find{ it.name == versioning.info.lastTag}.collect { it }[0]
    //println grgit.log {range(grgit.tag.list().find{ it.name == versioning.info.lastTag}.collect { it }[0].name, "HEAD")}.size()
}

generateGrammarSource {
    doLast {
        delete  "$projectDir/src/generated/antlr/"
        copy {
            from "$buildDir/generated-src/antlr/main"
            into "$projectDir/src/generated/antlr/uk/ac/warwick/dcs/sherlock/services/preprocessing"
        }
    }
}

/** Token Replacement */
task generateSources(type: Copy) {
    delete "$buildDir/src"
    from "src/main/java"
    into "$buildDir/src/main/java"
    filter(ReplaceTokens, tokens: [VERSION:  project.version.toString()])
}
sourceSets.main.java.srcDirs = ["$buildDir/src/main/java", "src/generated/antlr/"]
compileJava.dependsOn generateSources

/** Jar Maifest */
jar {
    delete fileTree("$buildDir/libs") { include '*.jar' }
    manifest {
        attributes (
                'Main-Class': 'uk.ac.warwick.dcs.sherlock.SherlockApplication',
                "Class-Path": 'lib/' + configurations.compile.collect { it.getName() }.join(' lib/')
        )
    }
}

/** Copy dependencies in lib folder */
task deps(type: Copy) {
    doFirst {
        mkdir("$buildDir/libs/lib")
    }
    from configurations.runtime
    into "$buildDir/libs/lib"
}

/** Create dist zip */
task zip(type: Zip) {
    delete   fileTree("$buildDir/distributions") { include '*.zip' }
    from "$buildDir/libs"
    into(project.name + '-' + project.version)
}

task distribution {
    dependsOn 'deps'
    dependsOn 'jar'
    dependsOn 'zip'
    tasks.findByName('jar').mustRunAfter 'deps'
    tasks.findByName('zip').mustRunAfter 'jar'
}

test {
    useJUnitPlatform()
}

clean {
    delete  "src/generated"
}
